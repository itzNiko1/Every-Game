--Niko 's Script

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Every Game", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})


-- Player tab

local PlayerTab = Window:MakeTab({
 Name = "Player",
 Icon = "rbxassetid://4483345998",
 PremiumOnly = false
})

local Section = PlayerTab:AddSection({
 Name = "Movement"
})

PlayerTab:AddSlider({
    Name = "Walkspeed",
    Min = 0.2,
    Max = 1,
    Default = 0.2,
    Color = Color3.fromRGB(15, 117, 80),
    Increment = 0.02,
    Callback = function(Value)
        local walkspeed = 16 + (Value - 0.2) * (500 - 16) / (1 - 0.2)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkspeed
    end    
})

PlayerTab:AddSlider({
 Name = "Jump Height",
 Min = 48,
 Max = 500,
 Default = 48,
 Color = Color3.fromRGB(15, 117, 80),
 Increment = 1,
 ValueName = "Height",
 Callback = function(Value)
  game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
 end    
})

--Infinite jump

local player = game.Players.LocalPlayer
local humanoid = player.Character:WaitForChild("Humanoid")
local userInputService = game:GetService("UserInputService")

local canJump = false

local function onJumpRequest()
    if canJump then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

userInputService.JumpRequest:Connect(onJumpRequest)

PlayerTab:AddToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(Value)
        canJump = Value
        if not Value then
            -- Reset canJump to false if toggled off
            humanoid.StateChanged:Connect(function(_, newState)
                if newState == Enum.HumanoidStateType.Freefall then
                    canJump = false
                elseif newState == Enum.HumanoidStateType.Jumping then
                    canJump = false
                end
            end)
        end
        print(Value and "Infinite Jump Enabled" or "Infinite Jump Disabled")
    end    
})

humanoid.StateChanged:Connect(function(_, newState)
    if newState == Enum.HumanoidStateType.Freefall then
        canJump = true
    elseif newState == Enum.HumanoidStateType.Jumping then
        canJump = false
    end
end)

PlayerTab:AddLabel("Made by Niko")

PlayerTab:AddLabel("https://www.tiktok.com/@car_hubs10")

PlayerTab:AddLabel("Discord/itzniko1_10808")

--Main tab

local MainTab = Window:MakeTab({
 Name = "Main",
 Icon = "rbxassetid://4483345998",
 PremiumOnly = false
})

local Section = MainTab:AddSection({
 Name = "Main"
})

--ESP

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local highlightColor = Color3.fromRGB(255, 0, 0)
local highlightEnabled = false

local function highlightPlayer(player)
    local character = player.Character or player.CharacterAdded:Wait()
    local highlight = Instance.new("Highlight")
    highlight.Parent = character
    highlight.FillColor = highlightColor
    highlight.OutlineColor = highlightColor
end

local function toggleHighlight(value)
    highlightEnabled = value
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if highlightEnabled then
                highlightPlayer(player)
            else
                if player.Character then
                    local highlight = player.Character:FindFirstChildOfClass("Highlight")
                    if highlight then
                        highlight:Destroy()
                    end
                end
            end
        end
    end
end

MainTab:AddToggle({
    Name = "Enable ESP",
    Default = false,
    Callback = function(Value)
        toggleHighlight(Value)
    end    
})

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            if highlightEnabled then
                highlightPlayer(player)
            end
        end)
        if player.Character then
            if highlightEnabled then
                highlightPlayer(player)
            end
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if highlightEnabled then
            highlightPlayer(player)
        end
    end)
end)
 
--Aimbot

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local camera = game.Workspace.CurrentCamera
local aimEnabled = false
local aimbotStrength = 0.1
local lockedTarget = nil

local function getClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge
    
    for _, target in pairs(game.Players:GetPlayers()) do
        if target ~= player and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (target.Character.HumanoidRootPart.Position - camera.CFrame.Position).magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = target
            end
        end
    end
    
    return closestPlayer
end

local function aimAt(target)
    if target then
        local targetPosition = target.Character.HumanoidRootPart.Position
        local newCFrame = CFrame.new(camera.CFrame.Position, targetPosition)
        camera.CFrame = camera.CFrame:Lerp(newCFrame, aimbotStrength)
    end
end

mouse.Button2Down:Connect(function()
    if aimEnabled then
        if lockedTarget then
            
            lockedTarget = nil
        else
            
            lockedTarget = getClosestPlayer()
        end
    end
end)

MainTab:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(Value)
        aimEnabled = Value
        if not aimEnabled then
            lockedTarget = nil
        end
    end    
})

MainTab:AddSlider({
    Name = "Aimbot Strength",
    Min = 0,
    Max = 1,
    Default = 0.1,
    Increment = 0.01,
    Callback = function(Value)
        aimbotStrength = Value
    end
})

game:GetService("RunService").RenderStepped:Connect(function()
    if aimEnabled and lockedTarget then
        aimAt(lockedTarget)
    end
end)

--Fly

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local flying = false
local speed = 100

local function fly()
    flying = true
    humanoid.PlatformStand = true
    local bodyVelocity = Instance.new("BodyVelocity")
    local bodyGyro = Instance.new("BodyGyro")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyGyro.MaxTorque = Vector3.new(4000, 4000, 4000)
    bodyGyro.CFrame = character.HumanoidRootPart.CFrame
    bodyVelocity.Parent = character.HumanoidRootPart
    bodyGyro.Parent = character.HumanoidRootPart

    while flying do
        local camera = workspace.CurrentCamera
        local direction = camera.CFrame.LookVector
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)

        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
            bodyVelocity.Velocity = bodyVelocity.Velocity + direction * speed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
            bodyVelocity.Velocity = bodyVelocity.Velocity - direction * speed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
            bodyVelocity.Velocity = bodyVelocity.Velocity - camera.CFrame.RightVector * speed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
            bodyVelocity.Velocity = bodyVelocity.Velocity + camera.CFrame.RightVector * speed
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
            bodyVelocity.Velocity = bodyVelocity.Velocity + Vector3.new(0, speed, 0)
        end
        if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
            bodyVelocity.Velocity = bodyVelocity.Velocity - Vector3.new(0, speed, 0)
        end

        bodyGyro.CFrame = camera.CFrame
        wait(0.1)
    end

    bodyVelocity:Destroy()
    bodyGyro:Destroy()
    humanoid.PlatformStand = false
end

local function toggleFly(Value)
    flying = Value
    if flying then
        fly()
    end
end

MainTab:AddToggle({
    Name = "Enable Fly",
    Default = false,
    Callback = toggleFly
})

MainTab:AddSlider({
    Name = "Speed",
    Min = 1,
    Max = 250,
    Default = 50,
    Callback = function(Value)
        speed = Value
        print("Fly speed set to: " .. speed)
    end
})

local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.F then
        toggleFly(not flying)
    end
end)

MainTab:AddLabel("You can also use Fly by pressing F key to !")

OrionLib:Init()
